package com.plutontech.apkmanager.Adapters;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.pm.ApplicationInfo;import android.os.Environment;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.PopupMenu;import android.widget.TextView;import com.plutontech.apkmanager.R;import com.plutontech.apkmanager.Utils.FileUtils;import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.List;/** * Created by Amir on 7/8/2015. *///http://keepsafe.github.io/2014/11/19/building-a-custom-overflow-menu.html//Custom popup menupublic class GeneralAdapter extends BaseAdapter {    Context context;    ApplicationInfo applicationInfo[];    static GeneralAdapter adapter1, adapter2, adapter3;    public GeneralAdapter(Context context, ApplicationInfo[] applicationInfo) {        this.context = context;        this.applicationInfo = applicationInfo;    }    public static GeneralAdapter getAdapter1(final Context cx, ApplicationInfo[] ai) {        if (adapter1 == null) {            List<ApplicationInfo> mList = Arrays.asList(ai);            Collections.sort(mList,new Comparator<ApplicationInfo>() {                @Override                public int compare(ApplicationInfo applicationInfo, ApplicationInfo applicationInfo2) {                    return applicationInfo.loadLabel(cx.getPackageManager()).toString().compareToIgnoreCase(applicationInfo2.loadLabel(cx.getPackageManager()).toString());                }            });            ai = mList.toArray(new ApplicationInfo[mList.size()]);            adapter1 = new GeneralAdapter(cx, ai);        }        return adapter1;    }    public static GeneralAdapter getAdapter2(final Context cx, ApplicationInfo[] ai) {        if (adapter2 == null) {            List<ApplicationInfo> mList = Arrays.asList(ai);            Collections.sort(mList,new Comparator<ApplicationInfo>() {                @Override                public int compare(ApplicationInfo applicationInfo, ApplicationInfo applicationInfo2) {                    return applicationInfo.loadLabel(cx.getPackageManager()).toString().compareToIgnoreCase(applicationInfo2.loadLabel(cx.getPackageManager()).toString());                }            });            ai = mList.toArray(new ApplicationInfo[mList.size()]);            adapter2 = new GeneralAdapter(cx, ai);        }        return adapter2;    }    public static GeneralAdapter getAdapter3(final Context cx, ApplicationInfo[] ai) {        if (adapter2 == null) {            List<ApplicationInfo> mList = Arrays.asList(ai);            Collections.sort(mList,new Comparator<ApplicationInfo>() {                @Override                public int compare(ApplicationInfo applicationInfo, ApplicationInfo applicationInfo2) {                    return applicationInfo.loadLabel(cx.getPackageManager()).toString().compareToIgnoreCase(applicationInfo2.loadLabel(cx.getPackageManager()).toString());                }            });            ai = mList.toArray(new ApplicationInfo[mList.size()]);            adapter3 = new GeneralAdapter(cx, ai);        }        return adapter3;    }    @Override    public int getCount() {        return applicationInfo.length;    }    @Override    public Object getItem(int position) {        return applicationInfo[position];    }    @Override    public long getItemId(int position) {        return 0;    }    class ViewHolder {        TextView appName, packageName, appSize;        ImageView appImage;    }    @Override    public View getView(final int position, View convertView, ViewGroup parent) {        ViewHolder holder = null;        try {            if (convertView == null) {                LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);                convertView = inflater.inflate(R.layout.single_item, null, false);                holder = new ViewHolder();                convertView.setTag(holder);            } else {                holder = (ViewHolder) convertView.getTag();            }            holder.appName = (TextView) convertView.findViewById(R.id.appName);            final String appNameString = (String) applicationInfo[position].loadLabel(context.getPackageManager());            holder.appName.setText(appNameString);            holder.packageName = (TextView) convertView.findViewById(R.id.packageName);            holder.packageName.setText(applicationInfo[position].packageName);//        PackageStats stats = new PackageStats(applicationInfo[position].sourceDir + "/" + applicationInfo[position].packageName);            holder.appSize = (TextView) convertView.findViewById(R.id.appSize);            float[] apppSize = null;            long fileSize = new File(applicationInfo[position].sourceDir).length();//        try {//            fileSize = new FileInputStream(applicationInfo[position].sourceDir).getChannel().size();//            apppSize = new float[1];//            apppSize[0] = fileSize;//        } catch (Exception e) {//            e.printStackTrace();//        }            String size = String.format("%.2f", (float) fileSize / (1024 * 1024));            holder.appSize.setText(size + "Mb");            holder.appImage = (ImageView) convertView.findViewById(R.id.appImage);            holder.appImage.setImageDrawable(applicationInfo[position].loadIcon(context.getPackageManager()));            final ImageView popupImage = (ImageView) convertView.findViewById(R.id.myPopUpButton);            popupImage.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(final View view) {                    PopupMenu popupMenu = new PopupMenu(context, view);                    popupMenu.getMenuInflater().inflate(R.menu.m_pop_up, popupMenu.getMenu());                    Object menuHelper;                    Class[] argTypes;                    try {//                        Field fMenuHelper = PopupMenu.class.getDeclaredField("mPopup");//                        fMenuHelper.setAccessible(true);////                        menuHelper = fMenuHelper.get(popupMenu);//                        argTypes = new Class[]{boolean.class};//                        menuHelper.getClass().getDeclaredMethod("setForceShowIcon", argTypes).invoke(menuHelper, true);                    } catch (Exception e) {                        Log.d("TAG", "error forcing menu icons to show", e);                        popupMenu.show();                        return;                    }                    popupMenu.show();                    popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {                        @Override                        public boolean onMenuItemClick(MenuItem menuItem) {                            switch (menuItem.getItemId()) {                                case R.id.extract://                                    ProgressDialog dialog = ProgressDialog.show(context, "Extracting", "Extracting Files . . ", true, false);                                    FileUtils.getInstance(context).extract(position, applicationInfo, view);//                                    dialog.dismiss();//                                    Intent intent = new Intent(context, FileActivity.class);//                                    intent.putExtra("appInfo", applicationInfo[position]);//                                    context.startActivity(intent);//                                    ((AppCompatActivity)context).finish();                                    break;                                case R.id.share:                                    FileUtils.getInstance(context).share(new File(applicationInfo[position].publicSourceDir));                                    break;                                case R.id.uninstall:                                    FileUtils.getInstance(context).getInfo(applicationInfo[position].packageName);                                    break;                                case R.id.copy:                                    try {                                        File fileDirectory = new File(Environment.getExternalStorageDirectory().getPath() + "/Apk Manager/APKs/"                                                + appNameString);                                        fileDirectory.mkdirs();                                        FileUtils.getInstance(context).copy(new File(applicationInfo[position].publicSourceDir),                                                new File(fileDirectory, appNameString + ".apk"));                                        AlertDialog.Builder builder = new AlertDialog.Builder(context);                                        builder.setTitle("File Path");                                        builder.setMessage(fileDirectory.getAbsolutePath());                                        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {                                            @Override                                            public void onClick(DialogInterface dialogInterface, int i) {                                                dialogInterface.cancel();                                            }                                        });                                        builder.create().show();//                                        Snackbar.make(view, "" + fileDirectory.getAbsolutePath(), Snackbar.LENGTH_SHORT).setAction("Action", null).show();                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                    break;                            }                            return false;                        }                    });                }            });//        convertView.setOnClickListener(new View.OnClickListener() {//            @Override//            public void onClick(View view) {//                Intent intent = new Intent(context, CheeseDetailActivity.class);////                temList = context.getPackageManager().getInstalledPackages(PackageManager.GET_PROVIDERS);////                String[] myListArray = temList.toArray(new String[temList.size()]);////                Log.d("TAG", "" + temList);//                intent.putExtra("Name", applicationInfo[position]);//                context.startActivity(intent);//            }//        });        } catch (Exception e) {            e.printStackTrace();        }        return convertView;    }}